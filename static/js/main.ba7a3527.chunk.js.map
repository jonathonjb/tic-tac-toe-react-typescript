{"version":3,"sources":["components/square.tsx","components/board.tsx","components/game.tsx","index.tsx"],"names":["Square","props","className","onClick","value","Board","renderSquare","i","squares","calculateWinner","lines","length","a","b","c","Game","status","useState","Array","fill","history","setHistory","stepNumber","setStepNumber","xIsNext","setXIsNext","currHistory","current","winner","moves","map","step","move","description","jumpTo","slice","concat","handleClick","ReactDOM","render","document","getElementById"],"mappings":"wKAeeA,MARf,SAAgBC,GACd,OACE,wBAAQC,UAAU,SAASC,QAASF,EAAME,QAA1C,SACGF,EAAMG,SCwBEC,MA1Bf,SAAeJ,GACb,SAASK,EAAaC,GACpB,OAAO,cAAC,EAAD,CAAQH,MAAOH,EAAMO,QAAQD,GAAIJ,QAAS,kBAAMF,EAAME,QAAQI,MAGvE,OACE,gCACE,sBAAKL,UAAU,YAAf,UACGI,EAAa,GACbA,EAAa,GACbA,EAAa,MAEhB,sBAAKJ,UAAU,YAAf,UACGI,EAAa,GACbA,EAAa,GACbA,EAAa,MAEhB,sBAAKJ,UAAU,YAAf,UACGI,EAAa,GACbA,EAAa,GACbA,EAAa,UCxBtB,SAASG,EAAgBD,GAWvB,IAVA,IAAME,EAAQ,CACZ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEAH,EAAI,EAAGA,EAAIG,EAAMC,OAAQJ,IAAK,CACrC,kBAAkBG,EAAMH,GAAxB,GAAOK,EAAP,KAAUC,EAAV,KAAaC,EAAb,KACA,GAAIN,EAAQI,IAAMJ,EAAQI,KAAOJ,EAAQK,IAAML,EAAQI,KAAOJ,EAAQM,GACpE,OAAON,EAAQI,GAGnB,OAAO,KAqEMG,MAlEf,WACE,IA6CIC,EA7CJ,EAA8BC,mBAAS,CAAC,CAAET,QAASU,MAAM,GAAGC,KAAK,SAAjE,mBAAOC,EAAP,KAAgBC,EAAhB,KAGA,EAAoCJ,mBAAS,GAA7C,mBAAOK,EAAP,KAAmBC,EAAnB,KACA,EAA8BN,oBAAS,GAAvC,mBAAOO,EAAP,KAAgBC,EAAhB,KA4BMC,EAAcN,EACdO,EAAUD,EAAYJ,GACtBM,EAASnB,EAAgBkB,EAAQnB,SAEjCqB,EAAQH,EAAYI,KAAI,SAACC,EAAMC,GACnC,IAAMC,EAAcD,EAAO,eAAiBA,EAAO,mBACnD,OACE,6BACE,wBAAQ7B,QAAS,kBAbvB,SAAgB4B,GACdR,EAAcQ,GACdN,EAAWM,EAAO,IAAM,GAWGG,CAAOF,IAA9B,SAAsCC,KAD/BD,MAab,OALEhB,EADEY,EACO,WAAaA,EAEb,iBAAmBJ,EAAU,IAAM,KAI5C,sBAAKtB,UAAU,OAAf,UACE,qBAAKA,UAAU,aAAf,SACE,cAAC,EAAD,CAAOM,QAASmB,EAAQnB,QAASL,QAAS,SAACI,GAAD,OAjDhD,SAAqBA,GACnB,IAAMmB,EAAcN,EAAQe,MAAM,EAAGb,EAAa,GAE5Cd,EADUkB,EAAYA,EAAYf,OAAS,GACzBH,QAAQ2B,QAE5B1B,EAAgBD,IAAYA,EAAQD,KAIxCC,EAAQD,GAAKiB,EAAU,IAAM,IAC7BH,EACEK,EAAYU,OAAO,CACjB,CACE5B,QAASA,MAIfe,EAAcG,EAAYf,QAC1Bc,GAAYD,IA+ByCa,CAAY9B,QAE/D,sBAAKL,UAAU,YAAf,UACE,8BAAMc,IACN,6BAAKa,WC/EbS,IAASC,OAAO,cAAC,EAAD,IAAUC,SAASC,eAAe,U","file":"static/js/main.ba7a3527.chunk.js","sourcesContent":["import React from 'react';\n\ntype SquareProps = {\n  value: string | null;\n  onClick: () => void;\n};\n\nfunction Square(props: SquareProps): JSX.Element {\n  return (\n    <button className=\"square\" onClick={props.onClick}>\n      {props.value}\n    </button>\n  );\n}\n\nexport default Square;\n","import React from 'react';\nimport Square from './square';\n\ntype BoardProps = {\n  squares: Array<string | null>;\n  onClick: (i: number) => void;\n};\n\nfunction Board(props: BoardProps): JSX.Element {\n  function renderSquare(i: number): React.ReactNode {\n    return <Square value={props.squares[i]} onClick={() => props.onClick(i)} />;\n  }\n\n  return (\n    <div>\n      <div className=\"board-row\">\n        {renderSquare(0)}\n        {renderSquare(1)}\n        {renderSquare(2)}\n      </div>\n      <div className=\"board-row\">\n        {renderSquare(3)}\n        {renderSquare(4)}\n        {renderSquare(5)}\n      </div>\n      <div className=\"board-row\">\n        {renderSquare(6)}\n        {renderSquare(7)}\n        {renderSquare(8)}\n      </div>\n    </div>\n  );\n}\n\nexport default Board;\n","import React, { useState } from 'react';\nimport Board from './board';\n\n// helper function (Given to us by the React tutorial, modified to handle typescript)\nfunction calculateWinner(squares: Array<string | null>): string | null {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\n\nfunction Game(): JSX.Element {\n  const [history, setHistory] = useState([{ squares: Array(9).fill(null) }] as Array<{\n    squares: Array<string | null>;\n  }>);\n  const [stepNumber, setStepNumber] = useState(0 as number);\n  const [xIsNext, setXIsNext] = useState(true as boolean);\n\n  function handleClick(i: number): void {\n    const currHistory = history.slice(0, stepNumber + 1);\n    const current = currHistory[currHistory.length - 1];\n    const squares = current.squares.slice();\n\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n\n    squares[i] = xIsNext ? 'X' : 'O';\n    setHistory(\n      currHistory.concat([\n        {\n          squares: squares,\n        },\n      ]),\n    );\n    setStepNumber(currHistory.length);\n    setXIsNext(!xIsNext);\n  }\n\n  function jumpTo(step: number): void {\n    setStepNumber(step);\n    setXIsNext(step % 2 === 0);\n  }\n\n  const currHistory = history;\n  const current = currHistory[stepNumber];\n  const winner = calculateWinner(current.squares);\n\n  const moves = currHistory.map((step, move) => {\n    const description = move ? 'Go to move #' + move : 'Go to game start';\n    return (\n      <li key={move}>\n        <button onClick={() => jumpTo(move)}>{description}</button>\n      </li>\n    );\n  });\n\n  let status;\n  if (winner) {\n    status = 'Winner: ' + winner;\n  } else {\n    status = 'Next player: ' + (xIsNext ? 'X' : 'O');\n  }\n\n  return (\n    <div className=\"game\">\n      <div className=\"game-board\">\n        <Board squares={current.squares} onClick={(i) => handleClick(i)} />\n      </div>\n      <div className=\"game-info\">\n        <div>{status}</div>\n        <ol>{moves}</ol>\n      </div>\n    </div>\n  );\n}\n\nexport default Game;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Game from './components/game';\n\nReactDOM.render(<Game />, document.getElementById('root'));\n"],"sourceRoot":""}