{"version":3,"sources":["components/square.tsx","components/board.tsx","components/game.tsx","index.tsx"],"names":["Square","props","className","onClick","value","Board","renderSquare","i","squares","calculateWinner","lines","length","a","b","c","Game","status","useState","Array","fill","history","setHistory","stepNumber","setStepNumber","xIsNext","setXIsNext","currHistory","current","winner","moves","map","step","move","description","jumpTo","slice","concat","handleClick","ReactDOM","render","document","getElementById"],"mappings":"wKAeeA,MARf,SAAgBC,GACZ,OACI,wBAAQC,UAAU,SAASC,QAASF,EAAME,QAA1C,SACKF,EAAMG,SC2BJC,MA7Bf,SAAeJ,GACX,SAASK,EAAaC,GAClB,OAAO,cAAC,EAAD,CACHH,MAAOH,EAAMO,QAAQD,GACrBJ,QAAS,kBAAMF,EAAME,QAAQI,MAIrC,OACI,gCACI,sBAAKL,UAAU,YAAf,UACKI,EAAa,GACbA,EAAa,GACbA,EAAa,MAElB,sBAAKJ,UAAU,YAAf,UACKI,EAAa,GACbA,EAAa,GACbA,EAAa,MAElB,sBAAKJ,UAAU,YAAf,UACKI,EAAa,GACbA,EAAa,GACbA,EAAa,UC3B9B,SAASG,EAAgBD,GAWrB,IAVA,IAAME,EAAQ,CACV,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEFH,EAAI,EAAGA,EAAIG,EAAMC,OAAQJ,IAAK,CACnC,kBAAkBG,EAAMH,GAAxB,GAAOK,EAAP,KAAUC,EAAV,KAAaC,EAAb,KACA,GAAIN,EAAQI,IAAMJ,EAAQI,KAAOJ,EAAQK,IAAML,EAAQI,KAAOJ,EAAQM,GAClE,OAAON,EAAQI,GAGvB,OAAO,KAqEIG,MAlEf,WACI,IAyCIC,EAzCJ,EAA8BC,mBAC1B,CAAC,CAAET,QAASU,MAAM,GAAGC,KAAK,SAD9B,mBAAOC,EAAP,KAAgBC,EAAhB,KAGA,EAAoCJ,mBAAS,GAA7C,mBAAOK,EAAP,KAAmBC,EAAnB,KACA,EAA8BN,oBAAS,GAAvC,mBAAOO,EAAP,KAAgBC,EAAhB,KAwBMC,EAAcN,EACdO,EAAUD,EAAYJ,GACtBM,EAASnB,EAAgBkB,EAAQnB,SAEjCqB,EAAQH,EAAYI,KAAI,SAACC,EAAMC,GACjC,IAAMC,EAAcD,EAAO,eAAiBA,EAAO,mBACnD,OACI,6BACI,wBAAQ7B,QAAS,kBAb7B,SAAgB4B,GACZR,EAAcQ,GACdN,EAAYM,EAAO,IAAO,GAWKG,CAAOF,IAA9B,SAAsCC,KADjCD,MAcjB,OANIhB,EADAY,EACS,WAAaA,EAGb,iBAAmBJ,EAAU,IAAM,KAI5C,sBAAKtB,UAAU,OAAf,UACI,qBAAKA,UAAU,aAAf,SACI,cAAC,EAAD,CACIM,QAASmB,EAAQnB,QACjBL,QAAS,SAACI,GAAD,OAhDzB,SAAqBA,GACjB,IAAMmB,EAAcN,EAAQe,MAAM,EAAGb,EAAa,GAE5Cd,EADUkB,EAAYA,EAAYf,OAAS,GACzBH,QAAQ2B,QAE5B1B,EAAgBD,IAAYA,EAAQD,KAIxCC,EAAQD,GAAKiB,EAAU,IAAM,IAC7BH,EAAWK,EAAYU,OAAO,CAAC,CAC3B5B,QAASA,MAEbe,EAAcG,EAAYf,QAC1Bc,GAAYD,IAkCgBa,CAAY9B,QAGpC,sBAAKL,UAAU,YAAf,UACI,8BAAMc,IACN,6BAAKa,WChFrBS,IAASC,OACL,cAAC,EAAD,IACAC,SAASC,eAAe,U","file":"static/js/main.1cc7aed8.chunk.js","sourcesContent":["import React from \"react\";\n\ntype SquareProps = {\n    value: string | null,\n    onClick: () => void\n}\n\nfunction Square(props: SquareProps) {\n    return (\n        <button className=\"square\" onClick={props.onClick}>\n            {props.value}\n        </button>\n    )\n}\n\nexport default Square","import React from 'react';\nimport Square from './square';\n\ntype BoardProps = {\n    squares: Array<string | null>,\n    onClick: (i: number) => void\n}\n\nfunction Board(props: BoardProps) {\n    function renderSquare(i: number): React.ReactNode {\n        return <Square\n            value={props.squares[i]}\n            onClick={() => props.onClick(i)}\n        />;\n    }\n\n    return (\n        <div>\n            <div className=\"board-row\">\n                {renderSquare(0)}\n                {renderSquare(1)}\n                {renderSquare(2)}\n            </div>\n            <div className=\"board-row\">\n                {renderSquare(3)}\n                {renderSquare(4)}\n                {renderSquare(5)}\n            </div>\n            <div className=\"board-row\">\n                {renderSquare(6)}\n                {renderSquare(7)}\n                {renderSquare(8)}\n            </div>\n        </div>\n    );\n}\n\nexport default Board","import React, { useState } from \"react\";\nimport Board from './board';\n\n// helper function (Given to us by the React tutorial, modified to handle typescript)\nfunction calculateWinner(squares: Array<string | null>): string | null {\n    const lines = [\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6],\n    ];\n    for (let i = 0; i < lines.length; i++) {\n        const [a, b, c] = lines[i];\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n            return squares[a];\n        }\n    }\n    return null;\n}\n\nfunction Game() {\n    const [history, setHistory] = useState(\n        [{ squares: Array(9).fill(null) }] as Array<{ squares: Array<string | null> }>\n    )\n    const [stepNumber, setStepNumber] = useState(0 as number);\n    const [xIsNext, setXIsNext] = useState(true as boolean);\n\n    function handleClick(i: number): void {\n        const currHistory = history.slice(0, stepNumber + 1);\n        const current = currHistory[currHistory.length - 1];\n        const squares = current.squares.slice();\n\n        if (calculateWinner(squares) || squares[i]) {\n            return;\n        }\n\n        squares[i] = xIsNext ? 'X' : 'O';\n        setHistory(currHistory.concat([{\n            squares: squares\n        }]));\n        setStepNumber(currHistory.length);\n        setXIsNext(!xIsNext);\n    }\n\n    function jumpTo(step: number): void {\n        setStepNumber(step);\n        setXIsNext((step % 2) === 0);\n    }\n\n    const currHistory = history;\n    const current = currHistory[stepNumber];\n    const winner = calculateWinner(current.squares);\n\n    const moves = currHistory.map((step, move) => {\n        const description = move ? 'Go to move #' + move : 'Go to game start';\n        return (\n            <li key={move}>\n                <button onClick={() => jumpTo(move)}>{description}</button>\n            </li>\n        )\n    })\n\n    let status;\n    if (winner) {\n        status = 'Winner: ' + winner;\n    }\n    else {\n        status = 'Next player: ' + (xIsNext ? 'X' : 'O');\n    }\n\n    return (\n        <div className=\"game\">\n            <div className=\"game-board\">\n                <Board\n                    squares={current.squares}\n                    onClick={(i) => handleClick(i)}\n                />\n            </div>\n            <div className=\"game-info\">\n                <div>{status}</div>\n                <ol>{moves}</ol>\n            </div>\n        </div>\n    );\n}\n\nexport default Game","import ReactDOM from \"react-dom\";\nimport './index.css';\nimport Game from './components/game';\n\nReactDOM.render(\n    <Game />,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}