{"version":3,"sources":["square.tsx","board.tsx","game.tsx","index.tsx"],"names":["Square","props","className","onClick","value","Board","i","this","squares","renderSquare","React","Component","calculateWinner","lines","length","a","b","c","Game","state","history","Array","fill","stepNumber","xIsNext","slice","setState","concat","step","status","current","winner","moves","map","move","description","jumpTo","handleClick","ReactDOM","render","document","getElementById"],"mappings":"mOAeeA,MARf,SAAgBC,GACZ,OACI,wBAAQC,UAAU,SAASC,QAASF,EAAME,QAA1C,SACKF,EAAMG,SCFbC,E,kKACF,SAAaC,GAA6B,IAAD,OACrC,OAAO,cAAC,EAAD,CACHF,MAAOG,KAAKN,MAAMO,QAAQF,GAC1BH,QAAS,kBAAM,EAAKF,MAAME,QAAQG,Q,oBAI1C,WACI,OACI,gCACI,sBAAKJ,UAAU,YAAf,UACKK,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,MAEvB,sBAAKP,UAAU,YAAf,UACKK,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,MAEvB,sBAAKP,UAAU,YAAf,UACKK,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,a,GAxBnBC,IAAMC,WA+BXN,IC7Bf,SAASO,EAAgBJ,GAWrB,IAVA,IAAMK,EAAQ,CACZ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEAP,EAAI,EAAGA,EAAIO,EAAMC,OAAQR,IAAK,CACrC,kBAAkBO,EAAMP,GAAxB,GAAOS,EAAP,KAAUC,EAAV,KAAaC,EAAb,KACA,GAAIT,EAAQO,IAAMP,EAAQO,KAAOP,EAAQQ,IAAMR,EAAQO,KAAOP,EAAQS,GACpE,OAAOT,EAAQO,GAGnB,OAAO,K,IA+EIG,E,kDA3EX,WAAYjB,GAAgB,IAAD,8BACvB,cAAMA,IACDkB,MAAQ,CACTC,QAAS,CAAC,CACNZ,QAASa,MAAM,GAAGC,KAAK,QAE3BC,WAAY,EACZC,SAAS,GAPU,E,+CAU3B,SAAYlB,GACR,IAAMc,EAAUb,KAAKY,MAAMC,QAAQK,MAAM,EAAGlB,KAAKY,MAAMI,WAAa,GAE9Df,EADUY,EAAQA,EAAQN,OAAS,GACjBN,QAAQiB,QAE7Bb,EAAgBJ,IAAYA,EAAQF,KAIvCE,EAAQF,GAAKC,KAAKY,MAAMK,QAAU,IAAM,IACxCjB,KAAKmB,SAAS,CACVN,QAASA,EAAQO,OAAO,CAAC,CACrBnB,QAASA,KAEbe,WAAYH,EAAQN,OACpBU,SAAUjB,KAAKY,MAAMK,a,oBAI7B,SAAOI,GACHrB,KAAKmB,SAAS,CACVH,WAAYK,EACZJ,QAAUI,EAAO,IAAO,M,oBAIhC,WAA2B,IAcnBC,EAdkB,OAChBT,EAAUb,KAAKY,MAAMC,QACrBU,EAAUV,EAAQb,KAAKY,MAAMI,YAC7BQ,EAASnB,EAAgBkB,EAAQtB,SAEjCwB,EAAQZ,EAAQa,KAAI,SAACL,EAAMM,GAC7B,IAAMC,EAAcD,EAAO,eAAiBA,EAAO,mBACnD,OACI,6BACI,wBAAQ/B,QAAS,kBAAM,EAAKiC,OAAOF,IAAnC,SAA2CC,KADtCD,MAcjB,OANIL,EADAE,EACS,WAAaA,EAGb,iBAAmBxB,KAAKY,MAAMK,QAAU,IAAM,KAIvD,sBAAKtB,UAAU,OAAf,UACI,qBAAKA,UAAU,aAAf,SACI,cAAC,EAAD,CACIM,QAASsB,EAAQtB,QACjBL,QAAS,SAACG,GAAD,OAAO,EAAK+B,YAAY/B,QAGzC,sBAAKJ,UAAU,YAAf,UACI,8BAAM2B,IACN,6BAAKG,c,GArENtB,IAAMC,WCzBzB2B,IAASC,OACL,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.aeaa082a.chunk.js","sourcesContent":["import React from \"react\";\n\ntype SquareProps = {\n    value: string | null,\n    onClick: () => void\n}\n\nfunction Square(props: SquareProps) {\n    return (\n        <button className=\"square\" onClick={props.onClick}>\n            {props.value}\n        </button>\n    )\n}\n\nexport default Square","import React from 'react';\nimport Square from './square';\n\ntype BoardProps = {\n    squares: Array<string | null>,\n    onClick: (i: number) => void\n}\n\nclass Board extends React.Component<BoardProps, unknown> {\n    renderSquare(i: number): React.ReactNode {\n        return <Square\n            value={this.props.squares[i]}\n            onClick={() => this.props.onClick(i)}\n        />;\n    }\n\n    render(): React.ReactNode {\n        return (\n            <div>\n                <div className=\"board-row\">\n                    {this.renderSquare(0)}\n                    {this.renderSquare(1)}\n                    {this.renderSquare(2)}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(3)}\n                    {this.renderSquare(4)}\n                    {this.renderSquare(5)}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(6)}\n                    {this.renderSquare(7)}\n                    {this.renderSquare(8)}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Board","import React from \"react\";\nimport Board from './board';\n\ntype GameState = {\n    history: Array<{squares: Array<string | null>}>,\n    stepNumber: number,\n    xIsNext: boolean\n}\n\n// helper function (Given to us by the React tutorial, modified to handle typescript)\nfunction calculateWinner(squares: Array<string | null>): string | null {\n    const lines = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6],\n    ];\n    for (let i = 0; i < lines.length; i++) {\n      const [a, b, c] = lines[i];\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n        return squares[a];\n      }\n    }\n    return null;\n  }\n\nclass Game extends React.Component<unknown, GameState> {\n    constructor(props: unknown){\n        super(props);\n        this.state = {\n            history: [{\n                squares: Array(9).fill(null)\n            }],\n            stepNumber: 0,\n            xIsNext: true\n        }\n    }\n    handleClick(i: number): void {\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\n        const current = history[history.length - 1];\n        const squares = current.squares.slice();\n\n        if(calculateWinner(squares) || squares[i]){\n            return;\n        }\n\n        squares[i] = this.state.xIsNext ? 'X' : 'O';\n        this.setState({ \n            history: history.concat([{\n                squares: squares\n            }]),\n            stepNumber: history.length,\n            xIsNext: !this.state.xIsNext\n        });\n    }\n\n    jumpTo(step: number): void{\n        this.setState({\n            stepNumber: step,\n            xIsNext: (step % 2) === 0\n        })\n    }\n\n    render(): React.ReactNode {\n        const history = this.state.history;\n        const current = history[this.state.stepNumber];\n        const winner = calculateWinner(current.squares);\n\n        const moves = history.map((step, move) => {\n            const description = move ? 'Go to move #' + move : 'Go to game start';\n            return (\n                <li key={move}>\n                    <button onClick={() => this.jumpTo(move)}>{description}</button>\n                </li>\n            )\n        })\n\n        let status;\n        if (winner){\n            status = 'Winner: ' + winner;\n        }\n        else {\n            status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n        }\n\n        return (\n            <div className=\"game\">\n                <div className=\"game-board\">\n                    <Board \n                        squares={current.squares}\n                        onClick={(i) => this.handleClick(i)}\n                    />\n                </div>\n                <div className=\"game-info\">\n                    <div>{status}</div>\n                    <ol>{moves}</ol>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Game","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport './index.css';\nimport Game from './game';\n\nReactDOM.render(\n    <Game />,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}